{"version":3,"sources":["components/profile/myPosts/myPosts.module.css","components/profile/myPosts/post/Post.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/myPosts/post/Post.jsx","components/profile/myPosts/myPosts.jsx","components/profile/myPosts/myPostsContainer.jsx","components/profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/profile/ProfileInfo/ProfileDataForm.jsx","components/profile/ProfileInfo/ProfileInfo.jsx","components/profile/Profile.jsx","components/profile/ProfileContainer.jsx"],"names":["module","exports","Posts","props","className","s","item","src","message","likesCount","maxLenghtCreator1","maxLenghtCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","FormControlCreator","name","validate","required","myPosts","React","memo","postsElements","posts","map","p","Post","postBlock","value","addPosts","newPost","compose","connect","state","ProfilePage","dispatch","text","addPostActionCreator","MyPosts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","onDoubleClick","input","textarea","ProfileDataReduxFrom","error","onClick","type","Object","entries","initialValues","contacts","key","ProfileInfo","profile","descriptionBlock","photos","large","mainPhoto","isOwner","target","files","length","savePhoto","exitFromEditMode","formData","saveProfile","then","console","log","goToEditMode","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contacts","allContacts","push","Profile","Preloader","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getUserStatus","history","refreshProfile","prevProps","prevState","snapshot","updateUserStatus","Component","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,UAAY,2BAA2B,MAAQ,yB,oBCA9FD,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,iBAAmB,sCAAsC,WAAa,gCAAgC,UAAY,iC,gJCW5JC,EATD,SAACC,GACd,OACC,yBAAKC,UAAWC,IAAEC,MAClB,yBAAKC,IAAI,yDACPJ,EAAMK,QACR,6BAAK,sCAAYL,EAAMM,e,kCCDnBC,EAAoBC,YAAiB,IAcrCC,EAAgBC,YAAU,CAC5BC,KAAM,QADYD,EAbC,SAACV,GACpB,OACI,0BAAMY,SAAUZ,EAAMa,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,kBAAmBC,UAAWC,YAAmB,YAAaC,KAAM,UAAWC,SAAU,CAACC,IAASb,MAE3H,6BACI,kDA0DDc,EA/CCC,IAAMC,MAAK,SAACvB,GACxB,IAAMwB,EAAgBxB,EAAMyB,MAAMC,KAAI,SAACC,GAAD,OAAQ,kBAACC,EAAD,CAAMvB,QAASsB,EAAEtB,QAASC,WAAYqB,EAAErB,gBAItF,OACI,6BACI,yBAAKL,UAAWC,IAAE2B,WACd,wCACA,kBAACpB,EAAD,CAAeG,SAPX,SAACkB,GACb9B,EAAM+B,SAASD,EAAME,aAQjB,yBAAK/B,UAAWC,IAAEuB,QAEjBD,M,OCpBES,cACdC,aAduB,SAACC,GACxB,MAAO,CACNV,MAAMU,EAAMC,YAAYX,UAGC,SAACY,GAC3B,MAAO,CACNN,SAAS,SAACO,GACTD,EAASE,YAAqBD,SAKlBL,CAEbO,G,yCCYaC,EA/BgB,SAACzC,GAAW,IAAD,EACN0C,oBAAS,GADH,mBAC/BC,EAD+B,KACrBC,EADqB,OAEZF,mBAAS1C,EAAM6C,QAFH,mBAEjCA,EAFiC,KAEzBC,EAFyB,KAgBtC,OAHAC,qBAAU,WACND,EAAU9C,EAAM6C,UAClB,CAAC7C,EAAM6C,SAEL,6BACMF,EACE,6BACI,2BAAOK,SAVF,SAACC,GACdH,EAAUG,EAAEC,cAAcpB,QASeqB,WAAW,EAAMC,OAd7C,WACbR,GAAY,GACZ5C,EAAMqD,aAAaR,IAaJf,MAAOe,KAGlB,6BACI,uCAAe,0BAAMS,cAtBlB,WACXV,GAAY,KAqB+C5C,EAAM6C,QAAU,WCxBjFU,EAAQtC,YAAmB,SAC3BuC,EAAWvC,YAAmB,YAwCrBwC,EALc/C,YAAU,CACnCC,KAAM,eADmBD,EAlCL,SAAC,GAAiC,IAAhCG,EAA+B,EAA/BA,aAAa6C,EAAkB,EAAlBA,MAAS1D,EAAS,wCACrD,OAAO,0BAAMY,SAAUC,GAClB,6BACG,4BAAQ8C,QAAS,cAAjB,SAEJ,6BACI,wCADJ,IACqB,kBAAC7C,EAAA,EAAD,CAAO8C,KAAM,OAAQ5C,UAAWuC,EAAOxC,YAAa,iBAAkBI,SAAU,GAAID,KAAM,cAE/G,6BACI,iDAAyB,kBAACJ,EAAA,EAAD,CAAO8C,KAAM,WAAY5C,UAAWuC,EAAOpC,SAAU,GAAID,KAAM,oBAE5F,6BACI,qDACA,kBAACJ,EAAA,EAAD,CAAOE,UAAWwC,EAAUrC,SAAU,GAAID,KAAM,4BAA6BH,YAAa,gCAE9F,6BACI,uCACA,kBAACD,EAAA,EAAD,CAAOE,UAAWwC,EAAUrC,SAAU,GAAID,KAAM,UAAWH,YAAa,cAE5E,6BACI,uCAAgB8C,OAAOC,QAAQ9D,EAAM+D,cAAcC,UAAUtC,KAAI,YAAgB,IAAD,mBAAbuC,EAAa,KAATnC,EAAS,KAC5E,OAAO,6BACH,2BAAImC,GADD,KACW,kBAACnD,EAAA,EAAD,CAAOE,UAAWuC,EAAOxC,YAAae,EAAOZ,KAAI,mBAAc+C,UAIxFP,GAAQ,6BACJA,OCKEQ,EAhCI,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,QAAQtB,EAAgC,EAAhCA,OAAOQ,EAAyB,EAAzBA,aAAgBrD,EAAS,qDAC5B0C,oBAAS,GADmB,mBACrDC,EADqD,KAC3CC,EAD2C,KAgB5D,OACC,6BAEC,yBAAK3C,UAAWC,IAAEkE,kBACjB,yBAAKhE,IAAK+D,EAAQE,OAAOC,OArBd,6GAqB+BrE,UAAWC,IAAEqE,YACtDvE,EAAMwE,SAAW,2BAAOZ,KAAM,OAAQZ,SAnBd,SAACC,GAEzBA,EAAEwB,OAAOC,MAAMC,OAAO,GACxB3E,EAAM4E,UAAU3B,EAAEwB,OAAOC,MAAM,OAiB7B/B,EACA,kBAAC,EAAD,CAAsBoB,cAAeI,EAASU,iBAAkB,WAAKjC,GAAY,IAAShC,SAX7E,SAACkE,GACjB9E,EAAM+E,YAAYD,GAAUE,MAAK,WAAKC,QAAQC,IAAI,sGAAsBtC,GAAY,MAAQ,SAACc,GAASd,GAAY,SAY/G,kBAAC,EAAD,CAAaD,SAAUA,EAAUwB,QAASA,EAASK,QAASxE,EAAMwE,QAASW,aAAc,WAAKvC,GAAY,MAE3G,kBAAC,EAAD,CAAwBC,OAAQA,EAAQQ,aAAcA,OAOpD+B,EAAc,SAAC,GAA8B,IAA7BjB,EAA4B,EAA5BA,QAAQK,EAAoB,EAApBA,QAAWxE,EAAS,qCACjD,OACC,6BACEwE,GAAW,6BACX,4BAAQb,QAAS3D,EAAMmF,cAAvB,SAED,6BACC,yCADD,IACoBhB,EAAQkB,UAE5B,mDACqBlB,EAAQmB,eAAe,MAAM,MAEjDnB,EAAQmB,gBAAkB,6BAC1B,sDAA+BnB,EAAQoB,2BAExC,wCACUpB,EAAQqB,SAElB,6BACC,sCAAc,kBAAC,EAAD,CAAUxB,SAAUG,EAAQH,cAOxCyB,EAAW,SAACzF,GAEjB,IADA,IAAM0F,EAAc,GACpB,MAAuB7B,OAAOC,QAAPD,OAAA,IAAAA,CAAA,GAAmB7D,EAAMgE,WAAhD,eAA2D,CAAC,IAAD,sBAAlDC,EAAkD,KAA9CnC,EAA8C,KAC1D4D,EAAYC,KAAK,6BACf1B,EADe,KACRnC,IAGV,OACC,6BACE4D,I,QCzDWE,EAbC,SAAC5F,GAChB,OAAIA,EAAMmE,QAMX,6BACC,kBAAC,EAAD,CAAaY,YAAa/E,EAAM+E,YAAaH,UAAW5E,EAAM4E,UAAWJ,QAASxE,EAAMwE,QAASL,QAASnE,EAAMmE,QAAStB,OAAQ7C,EAAM6C,OAAQQ,aAAcrD,EAAMqD,eACnK,kBAAC,EAAD,OAPQ,kBAACwC,EAAA,EAAD,O,QCCHC,E,+KAGE,IAAIC,EAASC,KAAKhG,MAAMiG,MAAMC,OAAOH,OAEhCA,IAEDA,EAASC,KAAKhG,MAAMmG,mBASpBH,KAAKhG,MAAMoG,eAAeL,GAC1BC,KAAKhG,MAAMqG,cAAcN,IARrBC,KAAKhG,MAAMsG,QAAQX,KAAK,Y,0CAahCK,KAAKO,mB,yCAKUC,EAAWC,EAAWC,GAClCF,EAAUP,MAAMC,OAAOH,QAAUC,KAAKhG,MAAMiG,MAAMC,OAAOH,QACxDC,KAAKO,mB,+BAOT,OACI,6BACI,kBAAC,EAAD,iBAAaP,KAAKhG,MAAlB,CACSmE,QAAS6B,KAAKhG,MAAMmE,QACpBtB,OAAQmD,KAAKhG,MAAM6C,OACnBQ,aAAc2C,KAAKhG,MAAM2G,iBACzBnC,SAAUwB,KAAKhG,MAAMiG,MAAMC,OAAOH,OAClCnB,UAAWoB,KAAKhG,MAAM4E,kB,GA3ChBtD,IAAMsF,WA0DtB3E,sBACXC,aARS,SAACC,GAAD,MAAY,CACrBgC,QAAShC,EAAMC,YAAY+B,QAC3BtB,OAAQV,EAAMC,YAAYS,OAC1BsD,iBAAkBhE,EAAM0E,KAAKd,OAC7Be,OAAQ3E,EAAM0E,KAAKC,UAIL,CAACV,mBAAgBC,kBAAeM,qBAAiB/B,cAAUG,kBACzEgC,IAFW9E,CAIb6D","file":"static/js/3.ce57a632.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"myPosts_item__Rrqf3\",\"postBlock\":\"myPosts_postBlock__2NrvJ\",\"posts\":\"myPosts_posts__9kKgh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3a13w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__1foNI\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2ghVD\",\"profileImg\":\"ProfileInfo_profileImg__TBFNf\",\"mainPhoto\":\"ProfileInfo_mainPhoto__pa2KU\"};","import React from 'react';\r\nimport s from'./Post.module.css';\r\n\r\nconst Posts = (props)=>{\r\n\treturn (\r\n\t\t<div className={s.item}>\r\n\t\t<img src='https://newsland.com/static/u/photo/4081247083/b.jpg' />\r\n\t\t\t{props.message}\r\n\t\t<div><span>Like {props.likesCount}</span></div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Posts;\r\n","import React from 'react';\r\nimport s from './myPosts.module.css';\r\nimport Post from './post/Post';\r\nimport {reduxForm, Field} from 'redux-form';\r\nimport {maxLenghtCreator, required} from \"../../../utils/Validators/validators\";\r\nimport {FormControlCreator} from \"../../common/FormsControls/formsControls.jsx\";\r\n\r\nconst maxLenghtCreator1 = maxLenghtCreator(10);\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Create new post\"} component={FormControlCreator('textarea')} name={\"newPost\"} validate={[required,maxLenghtCreator1]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add posts</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({\r\n    form: 'post'\r\n})(AddNewPostForm)\r\n\r\n\r\nconst myPosts = React.memo((props) => {\r\n    const postsElements = props.posts.map((p) => (<Post message={p.message} likesCount={p.likesCount}/>))\r\n    const addPost = (value) => {\r\n        props.addPosts(value.newPost);\r\n    };\r\n    return (\r\n        <div>\r\n            <div className={s.postBlock}>\r\n                <h3>My posts</h3>\r\n                <PostReduxForm onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}></div>\r\n\r\n            {postsElements}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n/*\r\nclass myPostsClassComponent extends React.PureComponent {\r\n    /!*shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return nextProps!=this.props||nextState!=this.state\r\n    }*!/\r\n\r\n    render() {\r\n        console.log(\"render\")\r\n        const postsElements = this.props.posts.map((p) => (<Post message={p.message} likesCount={p.likesCount}/>))\r\n        const addPost = (value) => {\r\n            this.props.addPosts(value.newPost);\r\n        };\r\n        return (\r\n            <div>\r\n                <div className={s.postBlock}>\r\n                    <h3>My posts</h3>\r\n                    <PostReduxForm onSubmit={addPost}/>\r\n                </div>\r\n                <div className={s.posts}></div>\r\n\r\n                {postsElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\n\r\nexport default myPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./myPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\n\r\nconst mapStateTiProps = (state)=>{\r\n\treturn {\r\n\t\tposts:state.ProfilePage.posts,\r\n\t}\r\n};\r\nconst mapDispatchToProps = (dispatch)=>{\r\n\treturn {\r\n\t\taddPosts:(text)=>{\r\n\t\t\tdispatch(addPostActionCreator(text))\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default compose(\r\n\tconnect(mapStateTiProps,mapDispatchToProps)\r\n)(MyPosts)\r\n\r\n\r\n// const superMyPostsContainer = connect(mapStateTiProps,mapDispatchToProps)(MyPosts);\r\n// export default superMyPostsContainer;\r\n\r\n/*\r\nconst myPostsContainer = (props)=>{\r\n\t//const state = props.store.getState();\r\n\r\n\treturn (\r\n\t\t<StoreContext.Consumer>\r\n\t\t\t{(store) => {\r\n\t\t\t\t//debugger\r\n\t\t\t\tconst addPost= ()=>{\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst onPostChange = (text)=>{\r\n\r\n\t\t\t\t};\r\n\t\t\t\tconst state = store.getState();\r\n\t\t\t\treturn <MyPosts\r\n\t\t\t\t\tupdateNewPostText={onPostChange}\r\n\t\t\t\t\taddPosts={addPost}\r\n\t\t\t\t\tposts={state.ProfilePage.posts}\r\n\t\t\t\t\tnewPostText={state.ProfilePage.newPostText}/>\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t</StoreContext.Consumer>\r\n\t);\r\n}\r\n */\r\n","import React, {useState,useEffect} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    const [editMode, setEditMode] = useState(false),\r\n        [status, setStatus] = useState(props.status),\r\n        activateMode = () => {\r\n            setEditMode(true)\r\n        },\r\n        deactivateMode = () => {\r\n            setEditMode(false)\r\n            props.updateStatus(status);\r\n        },\r\n        onStatusChange = (e)=>{\r\n            setStatus(e.currentTarget.value)\r\n        };\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    return (\r\n        <div>\r\n            {(editMode) ?\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateMode}\r\n                           value={status}/>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateMode}>{props.status || \"----\"}</span>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileStatusWithHooks;\r\n","import React,{useState} from 'react';\r\nimport {Field,reduxForm} from 'redux-form';\r\nimport {FormControlCreator} from \"../../common/FormsControls/formsControls\";\r\nconst input = FormControlCreator('input')\r\nconst textarea = FormControlCreator('textarea')\r\nconst ProfileDataForm = ({handleSubmit,error,...props})=>{\r\n    return <form onSubmit={handleSubmit}>\r\n         <div>\r\n            <button onClick={()=>{}}>Save</button>\r\n        </div>\r\n        <div>\r\n            <b>Full name</b>:<Field type={'text'} component={input} placeholder={'Your full name'} validate={[]} name={\"fullName\"}/>\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b><Field type={'checkbox'} component={input} validate={[]} name={\"lookingForAJob\"}/>\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>\r\n            <Field component={textarea} validate={[]} name={\"lookingForAJobDescription\"} placeholder={\"My professionals skills...\"}/>\r\n        </div>\r\n        <div>\r\n            <b>AboutMe:</b>\r\n            <Field component={textarea} validate={[]} name={\"aboutMe\"} placeholder={\"About me\"}/>\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>{Object.entries(props.initialValues.contacts).map(([key,value])=>{\r\n                return <div>\r\n                    <b>{key}</b>: <Field component={input} placeholder={value} name={`contacts.${key}`}/>\r\n                </div>\r\n        })}\r\n        </div>\r\n        {error &&<div>\r\n            {error}\r\n        </div>}\r\n    </form>\r\n}\r\n\r\n\r\n\r\nconst ProfileDataReduxFrom = reduxForm({\r\n    form: \"editProfile\"\r\n})(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataReduxFrom\r\n","import React,{useState} from 'react';\r\nimport s from'./ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataReduxFrom from \"./ProfileDataForm\";\r\nconst fixUrl = 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTmWTBYno5e6POwsWXxUPYv0qYj3EcBbLkZfyTeshTg4ejMXv2q';\r\nconst ProfileInfo= ({profile,status,updateStatus,...props})=>{\r\n\tconst [editMode, setEditMode] = useState(false);\r\n\tconst onMainPhotoSelected = (e)=>{\r\n\r\n\t\tif(e.target.files.length>0){\r\n\t\t\tprops.savePhoto(e.target.files[0]);\r\n\t\t}\r\n\t}\r\n\t/*const onSubmit = async (formData)=>{\r\n\t\tconst promise = await props.saveProfile(formData)\r\n\t\tsetEditMode(false)\r\n\t} в идеале так, но сервер...*/\r\n\tconst onSubmit = (formData)=>{\r\n\t\tprops.saveProfile(formData).then(()=>{console.log(\"Воу сервак ответил\");setEditMode(false)},(error)=>{setEditMode(false)})\r\n\r\n\t}\r\n\treturn(\r\n\t\t<div>\r\n\r\n\t\t\t<div className={s.descriptionBlock}>\r\n\t\t\t\t<img src={profile.photos.large || fixUrl} className={s.mainPhoto} />\r\n\t\t\t\t{props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\t\t\t\t{editMode ?\r\n\t\t\t\t\t<ProfileDataReduxFrom initialValues={profile} exitFromEditMode={()=>{setEditMode(false)}} onSubmit={onSubmit}/>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<ProfileData editMode={editMode} profile={profile} isOwner={props.isOwner} goToEditMode={()=>{setEditMode(true)}}/>}\r\n\r\n\t\t\t\t<ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default ProfileInfo;\r\n\r\nconst ProfileData = ({profile,isOwner,...props})=>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{isOwner && <div>\r\n\t\t\t\t<button onClick={props.goToEditMode}>Edit</button>\r\n\t\t\t</div>}\r\n\t\t\t<div>\r\n\t\t\t\t<b>Full name </b>:{profile.fullName}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\tLooking for a job: {profile.lookingForAJob?'yes':\"no\"}\r\n\t\t\t</div>\r\n\t\t\t{profile.lookingForAJob && <div>\r\n\t\t\t\t<b>My professional skills </b>{profile.lookingForAJobDescription}\r\n\t\t\t</div>}\r\n\t\t\t<div>\r\n\t\t\t\tAboutMe:{profile.aboutMe}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<b>AboutMe</b><Contacts contacts={profile.contacts}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nconst Contacts = (props)=>{\r\n\tconst allContacts = [];\r\n\tfor(let [key,value] of Object.entries({...props.contacts})){\r\n\t\tallContacts.push(<div>\r\n\t\t\t{key}: {value}\r\n\t\t</div>)\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{allContacts}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react';\r\nimport MyPostsContainer from './myPosts/myPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nconst Profile = (props)=>{\r\n\tif(!props.profile){\r\n\t\treturn <Preloader/>\r\n\t}\r\n\r\n\r\nreturn (\r\n<div> \r\n\t<ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n\t<MyPostsContainer/>\r\n</div>\r\n);\r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profileReducer\";\r\nimport Profile from \"./Profile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            } else {\r\n                this.props.getUserProfile(userId)//need fix\r\n                this.props.getUserStatus(userId)//need fix\r\n            }\r\n\r\n        } else {\r\n            this.props.getUserProfile(userId)//need fix\r\n            this.props.getUserStatus(userId)//need fix\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.match.params.userId != this.props.match.params.userId){\r\n            this.refreshProfile();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateUserStatus}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mSTP = (state) => ({\r\n    profile: state.ProfilePage.profile,\r\n    status: state.ProfilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mSTP, {getUserProfile, getUserStatus, updateUserStatus,savePhoto,saveProfile}),\r\n    withRouter,\r\n    //withAuthRedirectComponent,\r\n)(ProfileContainer)\r\n\r\n\r\n/*\r\nlet AuthRedirectComponent = withAuthRedirectComponent(ProfileContainer);\r\nconst WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\nexport default connect(mSTP,{getUserProfile})(WithUrlDataContainerComponent);*/\r\n"],"sourceRoot":""}